S -> L SC S | e                  (start)
L -> DSD | FD | WC | e           (line)
SC -> ';'
DSD -> ID | LD                   (data struct. declaration)
FD -> fun UL (Ps) {FC}           (func declaration)
WC -> write(DSR)                 (write command)
ID -> int LL = E                 (int declaration)
LD -> list LL = [LC]             (list declaration)
UL -> 'A' | 'B' | 'C' | 'D'...   (all capital letters)
Ps -> P P'                       (parameters passed)
Ps' -> , P Ps' | e               (
FC -> { L } [IFELSE]             (function contents)
DSR -> LL DSR                    (data struct. reference)
DSR' -> .head | .tail | .pushHead(E) | .popHead | .empty | e
LL -> 'a' | 'b' | 'c' | 'd'...   (lowercase letter)
E -> IE | BE | NUM | FCL         (expression)
LC -> NUM, LC | e                (list contents)
P -> DST DSR | DST r             (parameter)
IFELSE -> IF ELSE                (if/else compound)
IE -> (IEN NOP IEN)              (integer expression)
BE -> JB | CB                    (bool expression)
NUM -> 0 | 1 | 2...              (numbers allowed)
DST -> int | list                (data struct. type)
IF -> ? BE RS                    (if statement)
ELSE -> RS                       (else statement)
NOP -> * | + | - | /             (number operator)
IEN -> DSR | NUM | DSR.length | DSR.head | DSR.tail (integer expression number)
JB -> (DST.empty)                (just bool in expression)
CB -> (IEN COP IEN)              (comparative bool expression)
RS -> return RE
COP -> = | < | > | <= | >=       (comparative operators)
RE -> DSR | FCL | NUM            (return expression)
FCL -> UL(Ps)                    (function call)